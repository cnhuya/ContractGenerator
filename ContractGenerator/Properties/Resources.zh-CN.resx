<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="tokenName" xml:space="preserve">
    <value>名称</value>
  </data>
  <data name="variableName" xml:space="preserve">
    <value> 变量名称</value>
  </data>
  <data name="advancedInfo" xml:space="preserve">
    <value>更高级且可扩展的智能合约，处理存储历史/先前存储的数据。

示例用法：存储所有现有订单…</value>
  </data>
  <data name="tokenburnFee" xml:space="preserve">
    <value>销毁费用</value>
  </data>
  <data name="tokenPrivileges" xml:space="preserve">
    <value>所有者权限</value>
  </data>
  <data name="tokenFee" xml:space="preserve">
    <value>费用</value>
  </data>
  <data name="tokenMintable" xml:space="preserve">
    <value>可铸造</value>
  </data>
  <data name="tokenfeeInfo" xml:space="preserve">
    <value>如果不想要任何费用，请设为 0。</value>
  </data>
  <data name="tokenSymbol" xml:space="preserve">
    <value>符号</value>
  </data>
  <data name="tokentxFee" xml:space="preserve">
    <value>转账费用</value>
  </data>
  <data name="tokenstakingInfoa" xml:space="preserve">
    <value>如果不想要质押功能，请设为 0。</value>
  </data>
  <data name="deluxeInfo" xml:space="preserve">
    <value>高度可扩展、强大且可定制的智能合约，可为特定数据结构存储多个值。

示例用法：存储每个用户的历史购买记录。</value>
  </data>
  <data name="simpleInfo" xml:space="preserve">
    <value>简单但高度可定制的智能合约，可存储永久或临时数据，不保存历史数据。

示例用法：您的个人资料（存储姓名、年龄、性别）。</value>
  </data>
  <data name="tokenSupply" xml:space="preserve">
    <value>供应量</value>
  </data>
  <data name="tokenBurnable" xml:space="preserve">
    <value>可销毁</value>
  </data>
  <data name="cryptoInfo" xml:space="preserve">
    <value>创建您自己的加密货币。您可以设置硬币的数量、名称、代码，并实现特殊功能，如通货膨胀或像比特币一样的减半！</value>
  </data>
  <data name="tokenStaking" xml:space="preserve">
    <value>质押</value>
  </data>
  <data name="dataStorageInfo" xml:space="preserve">
    <value>创建您自己的专门智能合约，可在兼容 Move 和 Solidity 的区块链上存储任何类型的数据。</value>
  </data>
  <data name="variableType" xml:space="preserve">
    <value>变量类型</value>
  </data>
  <data name="tokenDecimals" xml:space="preserve">
    <value>小数位数</value>
  </data>
  <data name="tokenGenerate" xml:space="preserve">
    <value>生成 </value>
  </data>
  <data name="addVariable" xml:space="preserve">
    <value> 添加变量</value>
  </data>
  <data name="deleteVariable" xml:space="preserve">
    <value>删除变量</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="document" type="System.Resources.ResXNullRef, System.Windows.Forms">
    <value />
  </data>
  <data name="coins1" type="System.Resources.ResXNullRef, System.Windows.Forms">
    <value />
  </data>
  <data name="continue" xml:space="preserve">
    <value>继续</value>
  </data>
  <data name="feeCollector" xml:space="preserve">
    <value>费用收取者</value>
  </data>
  <data name="viewVariables" xml:space="preserve">
    <value>查看变量 </value>
  </data>
  <data name="Package" xml:space="preserve">
    <value>包裹</value>
  </data>
  <data name="Code_" xml:space="preserve">
    <value>代码</value>
  </data>
</root>
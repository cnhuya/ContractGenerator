<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="tokenName" xml:space="preserve">
    <value>이름</value>
  </data>
  <data name="variableName" xml:space="preserve">
    <value>변수 이름</value>
  </data>
  <data name="advancedInfo" xml:space="preserve">
    <value>더 발전되고 확장 가능한 스마트 계약으로, 과거 데이터를 저장할 수 있습니다.

사용 예시: 모든 기존 주문 저장…</value>
  </data>
  <data name="tokenburnFee" xml:space="preserve">
    <value>소각 수수료</value>
  </data>
  <data name="tokenPrivileges" xml:space="preserve">
    <value> 소유자 권한</value>
  </data>
  <data name="tokenFee" xml:space="preserve">
    <value>수수료</value>
  </data>
  <data name="tokenMintable" xml:space="preserve">
    <value>민팅 가능</value>
  </data>
  <data name="tokenfeeInfo" xml:space="preserve">
    <value>수수료를 원하지 않으면 0으로 설정하세요.</value>
  </data>
  <data name="tokenSymbol" xml:space="preserve">
    <value>심볼</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="book1" type="System.Resources.ResXNullRef, System.Windows.Forms">
    <value />
  </data>
  <data name="tokentxFee" xml:space="preserve">
    <value>전송 수수료</value>
  </data>
  <data name="tokenstakingInfoa" xml:space="preserve">
    <value>스테이킹 기능을 원하지 않으면 0으로 설정하세요.</value>
  </data>
  <data name="deluxeInfo" xml:space="preserve">
    <value>확장성이 뛰어나고 강력하며 사용자 정의가 가능한 스마트 계약으로, 특정 데이터 구조에 

사용 예시: 각 사용자의 구매 이력 저장.</value>
  </data>
  <data name="stationery-stack" type="System.Resources.ResXNullRef, System.Windows.Forms">
    <value />
  </data>
  <data name="simpleInfo" xml:space="preserve">
    <value>간단하지만 높은 사용자 정의가 가능한 스마트 계약으로, 영구적이거나 임시 데이터를 저장할 수 있으며, 역사적 데이터를 저장하지 않습니다.

사용 예시: 나만의 프로필 (이름, 나이, 성별 저장).</value>
  </data>
  <data name="tokenSupply" xml:space="preserve">
    <value>공급량</value>
  </data>
  <data name="tokenBurnable" xml:space="preserve">
    <value>소각 가능</value>
  </data>
  <data name="cryptoInfo" xml:space="preserve">
    <value>나만의 암호화폐를 만들어보세요. 존재해야 할 코인의 수, 이름, 티커를 설정하고, 인플레이션이나 비트코인처럼 반감기 기능도 구현할 수 있습니다!</value>
  </data>
  <data name="tokenStaking" xml:space="preserve">
    <value> 스테이킹</value>
  </data>
  <data name="dataStorageInfo" xml:space="preserve">
    <value>나만의 특수 스마트 계약을 만들어 Move 및 Solidity 호환 블록체인에서 원하는 모든 유형의 데이터를 저장할 수 있습니다.</value>
  </data>
  <data name="variableType" xml:space="preserve">
    <value>변수 유형</value>
  </data>
  <data name="tokenDecimals" xml:space="preserve">
    <value>소수점 자리수</value>
  </data>
  <data name="tokenGenerate" xml:space="preserve">
    <value> 생성</value>
  </data>
  <data name="String1" xml:space="preserve">
    <value> 선택</value>
  </data>
  <data name="addVariable" xml:space="preserve">
    <value>변수 추가</value>
  </data>
  <data name="deleteVariable" xml:space="preserve">
    <value>변수 삭제</value>
  </data>
  <data name="document" type="System.Resources.ResXNullRef, System.Windows.Forms">
    <value />
  </data>
  <data name="coins1" type="System.Resources.ResXNullRef, System.Windows.Forms">
    <value />
  </data>
  <data name="continue" xml:space="preserve">
    <value>계속하기</value>
  </data>
  <data name="feeCollector" xml:space="preserve">
    <value>수수료 징수자</value>
  </data>
  <data name="Package" xml:space="preserve">
    <value>소포</value>
  </data>
  <data name="Code_" xml:space="preserve">
    <value>코드</value>
  </data>
</root>
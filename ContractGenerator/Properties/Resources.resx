<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="tokenName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="variableName" xml:space="preserve">
    <value>Variable Name</value>
  </data>
  <data name="advancedInfo" xml:space="preserve">
    <value>More advanced and scalable smart contract that handles the store of historical/previously stored data.

Example usage: Storing ALL existing orders of something…
</value>
  </data>
  <data name="tokenburnFee" xml:space="preserve">
    <value>Burn Fee</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="layer (1)1" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\layer (1)1.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="tokenPrivileges" xml:space="preserve">
    <value>Owner Privileges</value>
  </data>
  <data name="layer" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\layer.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="tokenFee" xml:space="preserve">
    <value>Fees</value>
  </data>
  <data name="tokenMintable" xml:space="preserve">
    <value>Mintable</value>
  </data>
  <data name="layer (1)2" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\layer (1)2.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="tokenfeeInfo" xml:space="preserve">
    <value>Set to 0, if you don’t want any fees.</value>
  </data>
  <data name="new-document1" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\new-document.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="tokenSymbol" xml:space="preserve">
    <value>Symbol</value>
  </data>
  <data name="book1" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\book1.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="tokentxFee" xml:space="preserve">
    <value>Transfer Fee</value>
  </data>
  <data name="tokenstakingInfoa" xml:space="preserve">
    <value>Set to 0, if you don’t want a staking function.</value>
  </data>
  <data name="deluxeInfo" xml:space="preserve">
    <value>Highly scalable, capable, and customizable smart contract, which can store multiple values for a certain data structure.</value>
  </data>
  <data name="document1" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\document1.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="stationery-stack" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\stationery-stack.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="document2" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\document2.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="new-document" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\new-document.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="coins" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\coins.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="simpleInfo" xml:space="preserve">
    <value>Simple yet highly customizable smart contract that handles storing either permanent or temporary data, doesn’t save historical data.

Example usage: Your Own Profile (Storing Name, Age, Gender).
</value>
  </data>
  <data name="tokenSupply" xml:space="preserve">
    <value>Supply</value>
  </data>
  <data name="tokenBurnable" xml:space="preserve">
    <value>Burnable</value>
  </data>
  <data name="cryptoInfo" xml:space="preserve">
    <value>Create your own cryptocurrency. You can set how many coins should exist, the name, ticker, and also implement special functions such as inflation, or halving like Bitcoin does!</value>
  </data>
  <data name="tokenStaking" xml:space="preserve">
    <value>Staking</value>
  </data>
  <data name="code" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\code.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="dataStorageInfo" xml:space="preserve">
    <value>Create your own specialized smart contracts which allow storing any type of data you desire on Move &amp; Solidity-compatible blockchains.</value>
  </data>
  <data name="variableType" xml:space="preserve">
    <value>Variable Type</value>
  </data>
  <data name="book2" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\book2.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="tokenDecimals" xml:space="preserve">
    <value>Decimals</value>
  </data>
  <data name="layer (1)" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\layer (1).png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="tokenGenerate" xml:space="preserve">
    <value>Generate</value>
  </data>
  <data name="code1" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\code1.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="book" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\book.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="coins2" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\coins2.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="String1" xml:space="preserve">
    <value>Select</value>
  </data>
  <data name="addVariable" xml:space="preserve">
    <value>Add Variable</value>
  </data>
  <data name="deleteVariable" xml:space="preserve">
    <value>Delete Variable</value>
  </data>
  <data name="document" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\document.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="coins1" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\coins1.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="continue" xml:space="preserve">
    <value>Continue </value>
  </data>
  <data name="coins3" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\coins3.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="feeCollector" xml:space="preserve">
    <value>Fee Collector</value>
  </data>
  <data name="viewVariables" xml:space="preserve">
    <value>View Variables</value>
  </data>
  <data name="Package" xml:space="preserve">
    <value>Package</value>
  </data>
  <data name="Code_" xml:space="preserve">
    <value>Code</value>
  </data>
</root>